package com.thf.dabplayer.dab;

/* renamed from: com.ex.dabplayer.pad.dab.m */
/* loaded from: classes.dex */
public class Decode {

  /* renamed from: a */
  private static char[] f116a;

  static {
    char[] cArr = new char[256];
    cArr[1] = 1;
    cArr[2] = 2;
    cArr[3] = 3;
    cArr[4] = 4;
    cArr[5] = 5;
    cArr[6] = 6;
    cArr[7] = 7;
    cArr[8] = 8;
    cArr[9] = 9;
    cArr[10] = 10;
    cArr[11] = 11;
    cArr[12] = 12;
    cArr[13] = 13;
    cArr[14] = 14;
    cArr[15] = 15;
    cArr[16] = 16;
    cArr[17] = 17;
    cArr[18] = 18;
    cArr[19] = 19;
    cArr[20] = 20;
    cArr[21] = 21;
    cArr[22] = 22;
    cArr[23] = 23;
    cArr[24] = 24;
    cArr[25] = 25;
    cArr[26] = 26;
    cArr[27] = 27;
    cArr[28] = 28;
    cArr[29] = 29;
    cArr[30] = 30;
    cArr[31] = 31;
    cArr[32] = ' ';
    cArr[33] = '!';
    cArr[34] = '\"';
    cArr[35] = '#';
    cArr[36] = '$';
    cArr[37] = '%';
    cArr[38] = '&';
    cArr[39] = '\'';
    cArr[40] = '(';
    cArr[41] = ')';
    cArr[42] = '*';
    cArr[43] = '+';
    cArr[44] = ',';
    cArr[45] = '-';
    cArr[46] = '.';
    cArr[47] = '/';
    cArr[48] = '0';
    cArr[49] = '1';
    cArr[50] = '2';
    cArr[51] = '3';
    cArr[52] = '4';
    cArr[53] = '5';
    cArr[54] = '6';
    cArr[55] = '7';
    cArr[56] = '8';
    cArr[57] = '9';
    cArr[58] = ':';
    cArr[59] = ';';
    cArr[60] = '<';
    cArr[61] = '=';
    cArr[62] = '>';
    cArr[63] = '?';
    cArr[64] = '@';
    cArr[65] = 'A';
    cArr[66] = 'B';
    cArr[67] = 'C';
    cArr[68] = 'D';
    cArr[69] = 'E';
    cArr[70] = 'F';
    cArr[71] = 'G';
    cArr[72] = 'H';
    cArr[73] = 'I';
    cArr[74] = 'J';
    cArr[75] = 'K';
    cArr[76] = 'L';
    cArr[77] = 'M';
    cArr[78] = 'N';
    cArr[79] = 'O';
    cArr[80] = 'P';
    cArr[81] = 'Q';
    cArr[82] = 'R';
    cArr[83] = 'S';
    cArr[84] = 'T';
    cArr[85] = 'U';
    cArr[86] = 'V';
    cArr[87] = 'W';
    cArr[88] = 'X';
    cArr[89] = 'Y';
    cArr[90] = 'Z';
    cArr[91] = '[';
    cArr[92] = '\\';
    cArr[93] = ']';
    cArr[94] = '^';
    cArr[95] = '_';
    cArr[96] = '`';
    cArr[97] = 'a';
    cArr[98] = 'b';
    cArr[99] = 'c';
    cArr[100] = 'd';
    cArr[101] = 'e';
    cArr[102] = 'f';
    cArr[103] = 'g';
    cArr[104] = 'h';
    cArr[105] = 'i';
    cArr[106] = 'j';
    cArr[107] = 'k';
    cArr[108] = 'l';
    cArr[109] = 'm';
    cArr[110] = 'n';
    cArr[111] = 'o';
    cArr[112] = 'p';
    cArr[113] = 'q';
    cArr[114] = 'r';
    cArr[115] = 's';
    cArr[116] = 't';
    cArr[117] = 'u';
    cArr[118] = 'v';
    cArr[119] = 'w';
    cArr[120] = 'x';
    cArr[121] = 'y';
    cArr[122] = 'z';
    cArr[123] = '{';
    cArr[124] = '|';
    cArr[125] = '}';
    cArr[126] = '~';
    cArr[127] = 127;
    cArr[128] = 50081;
    cArr[129] = 50080;
    cArr[130] = 50089;
    cArr[131] = 50088;
    cArr[132] = 50093;
    cArr[133] = 50093;
    cArr[134] = 50099;
    cArr[135] = 50098;
    cArr[136] = 50106;
    cArr[137] = 50105;
    cArr[138] = 50065;
    cArr[139] = 50055;
    cArr[140] = 50590;
    cArr[141] = 50079;
    cArr[142] = 49825;
    cArr[143] = 50354;
    cArr[144] = 50082;
    cArr[145] = 50084;
    cArr[146] = 50090;
    cArr[147] = 50091;
    cArr[148] = 50094;
    cArr[149] = 50095;
    cArr[150] = 50100;
    cArr[151] = 50102;
    cArr[152] = 50107;
    cArr[153] = 50108;
    cArr[154] = 50097;
    cArr[155] = 50087;
    cArr[156] = 50591;
    cArr[157] = 50335;
    cArr[158] = 50353;
    cArr[159] = 50355;
    cArr[160] = 49834;
    cArr[161] = 52913;
    cArr[162] = 49833;
    cArr[163] = 65535;
    cArr[164] = 50334;
    cArr[165] = 50331;
    cArr[166] = 50568;
    cArr[167] = 50577;
    cArr[168] = 53120;
    cArr[169] = 65535;
    cArr[170] = 49827;
    cArr[171] = '$';
    cArr[172] = 65535;
    cArr[173] = 65535;
    cArr[174] = 65535;
    cArr[175] = 65535;
    cArr[176] = 49850;
    cArr[177] = 49849;
    cArr[178] = 49842;
    cArr[179] = 49843;
    cArr[180] = 49841;
    cArr[181] = 50352;
    cArr[182] = 50564;
    cArr[183] = 50609;
    cArr[184] = 49845;
    cArr[185] = 49855;
    cArr[186] = 50097;
    cArr[187] = 49840;
    cArr[188] = 49852;
    cArr[189] = 49853;
    cArr[190] = 49854;
    cArr[191] = 49831;
    cArr[192] = 50049;
    cArr[193] = 50048;
    cArr[194] = 50057;
    cArr[195] = 50056;
    cArr[196] = 50061;
    cArr[197] = 50060;
    cArr[198] = 50067;
    cArr[199] = 50066;
    cArr[200] = 50074;
    cArr[201] = 50073;
    cArr[202] = 50584;
    cArr[203] = 50316;
    cArr[204] = 50592;
    cArr[205] = 50621;
    cArr[206] = 50064;
    cArr[207] = 50367;
    cArr[208] = 50050;
    cArr[209] = 50052;
    cArr[210] = 50058;
    cArr[211] = 50059;
    cArr[212] = 50062;
    cArr[213] = 50063;
    cArr[214] = 50068;
    cArr[215] = 50070;
    cArr[216] = 50075;
    cArr[217] = 50076;
    cArr[218] = 50585;
    cArr[219] = 50317;
    cArr[220] = 50593;
    cArr[221] = 50622;
    cArr[222] = 50321;
    cArr[223] = 50560;
    cArr[224] = 50051;
    cArr[225] = 50053;
    cArr[226] = 50054;
    cArr[227] = 338;
    cArr[228] = 50578;
    cArr[229] = 50077;
    cArr[230] = 50069;
    cArr[231] = 50072;
    cArr[232] = 50078;
    cArr[233] = 50570;
    cArr[234] = 50580;
    cArr[235] = 50310;
    cArr[236] = 50586;
    cArr[237] = 50617;
    cArr[238] = 50598;
    cArr[239] = 50096;
    cArr[240] = 50083;
    cArr[241] = 50085;
    cArr[242] = 50086;
    cArr[243] = 50579;
    cArr[244] = 50613;
    cArr[245] = 50109;
    cArr[246] = 50101;
    cArr[247] = 50104;
    cArr[248] = 50110;
    cArr[249] = 50571;
    cArr[250] = 50581;
    cArr[251] = 50311;
    cArr[252] = 50587;
    cArr[253] = 50618;
    cArr[254] = 50599;
    cArr[255] = 50111;
    f116a = cArr;
  }

  /* renamed from: a */
  /*
  public static byte[] m30a(byte[] bArr) {
      int i3;
      int length = bArr.length;
      byte[] obj = new byte[length * 2];
      int i = 0;
      int i2 = 0;
      while (i < length) {
          int i4 = bArr[i] & 255;
          if (i4 < 128) {
              i3 = i2 + 1;
              obj[i2] = (byte) i4;
          } else {
              byte b = (byte) ((f116a[i4] >> '\b') & 255);
              byte b2 = (byte) (f116a[i4] & 255);
              int i5 = i2 + 1;
              obj[i2] = b;
              i3 = i5 + 1;
              obj[i5] = b2;
          }
          i++;
          i2 = i3;
      }
      byte[] obj2 = new byte[i2];
      System.arraycopy(obj, 0, obj2, 0, i2);
      return obj2;
  }
  */

  public static byte[] decodeToCharacter(byte[] bArr) {
    int length = bArr.length;
    byte[] obj = new byte[(length * 2)];
    int i = 0;
    int i2 = 0;
    while (i < length) {
      int i3;
      int i4 = bArr[i] & 255;
      if (i4 < 128) {
        i3 = i2 + 1;
        obj[i2] = (byte) i4;
      } else {
        byte b = (byte) (f116a[i4] & 255);
        int i5 = i2 + 1;
        obj[i2] = (byte) ((f116a[i4] >> 8) & 255);
        i3 = i5 + 1;
        obj[i5] = b;
      }
      i++;
      i2 = i3;
    }
    byte[] obj2 = new byte[i2];
    System.arraycopy(obj, 0, obj2, 0, i2);
    return obj2;
  }
}
